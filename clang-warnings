Enabled checks:
    clang-analyzer-apiModeling.StdCLibraryFunctions
    clang-analyzer-apiModeling.TrustNonnull
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-apiModeling.llvm.CastValue
    clang-analyzer-apiModeling.llvm.ReturnValue
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.InnerPointer
    clang-analyzer-cplusplus.Move
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.NewDeleteLeaks
    clang-analyzer-cplusplus.PureVirtualCall
    clang-analyzer-cplusplus.SelfAssignment
    clang-analyzer-cplusplus.SmartPtr
    clang-analyzer-cplusplus.VirtualCallModeling
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-fuchsia.HandleChecker
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullabilityBase
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.cplusplus.UninitializedObject
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.OSObjectCStyleCast
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.GCDAntipattern
    clang-analyzer-optin.performance.Padding
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-osx.API
    clang-analyzer-osx.MIG
    clang-analyzer-osx.NSOrCFErrorDerefChecker
    clang-analyzer-osx.NumberObjectConversion
    clang-analyzer-osx.OSObjectRetainCount
    clang-analyzer-osx.ObjCProperty
    clang-analyzer-osx.SecKeychainAPI
    clang-analyzer-osx.cocoa.AtSync
    clang-analyzer-osx.cocoa.AutoreleaseWrite
    clang-analyzer-osx.cocoa.ClassRelease
    clang-analyzer-osx.cocoa.Dealloc
    clang-analyzer-osx.cocoa.IncompatibleMethodTypes
    clang-analyzer-osx.cocoa.Loops
    clang-analyzer-osx.cocoa.MissingSuperCall
    clang-analyzer-osx.cocoa.NSAutoreleasePool
    clang-analyzer-osx.cocoa.NSError
    clang-analyzer-osx.cocoa.NilArg
    clang-analyzer-osx.cocoa.NonNilReturnValue
    clang-analyzer-osx.cocoa.ObjCGenerics
    clang-analyzer-osx.cocoa.RetainCount
    clang-analyzer-osx.cocoa.RetainCountBase
    clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
    clang-analyzer-osx.cocoa.SelfInit
    clang-analyzer-osx.cocoa.SuperDealloc
    clang-analyzer-osx.cocoa.UnusedIvars
    clang-analyzer-osx.cocoa.VariadicMethodTypes
    clang-analyzer-osx.coreFoundation.CFError
    clang-analyzer-osx.coreFoundation.CFNumber
    clang-analyzer-osx.coreFoundation.CFRetainRelease
    clang-analyzer-osx.coreFoundation.containers.OutOfBounds
    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
    clang-analyzer-security.FloatLoopCounter
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
    clang-analyzer-security.insecureAPI.UncheckedReturn
    clang-analyzer-security.insecureAPI.bcmp
    clang-analyzer-security.insecureAPI.bcopy
    clang-analyzer-security.insecureAPI.bzero
    clang-analyzer-security.insecureAPI.decodeValueOfObjCType
    clang-analyzer-security.insecureAPI.getpw
    clang-analyzer-security.insecureAPI.gets
    clang-analyzer-security.insecureAPI.mkstemp
    clang-analyzer-security.insecureAPI.mktemp
    clang-analyzer-security.insecureAPI.rand
    clang-analyzer-security.insecureAPI.strcpy
    clang-analyzer-security.insecureAPI.vfork
    clang-analyzer-unix.API
    clang-analyzer-unix.DynamicMemoryModeling
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.CStringModeling
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    clang-analyzer-valist.ValistBase
    misc-unused-alias-decls
    misc-unused-parameters
    misc-unused-using-decls
    modernize-avoid-bind
    modernize-avoid-c-arrays
    modernize-concat-nested-namespaces
    modernize-deprecated-headers
    modernize-deprecated-ios-base-aliases
    modernize-loop-convert
    modernize-make-shared
    modernize-make-unique
    modernize-pass-by-value
    modernize-raw-string-literal
    modernize-redundant-void-arg
    modernize-replace-auto-ptr
    modernize-replace-random-shuffle
    modernize-return-braced-init-list
    modernize-shrink-to-fit
    modernize-unary-static-assert
    modernize-use-auto
    modernize-use-bool-literals
    modernize-use-default-member-init
    modernize-use-emplace
    modernize-use-equals-default
    modernize-use-equals-delete
    modernize-use-nodiscard
    modernize-use-noexcept
    modernize-use-nullptr
    modernize-use-transparent-functors
    modernize-use-uncaught-exceptions
    modernize-use-using

clang-apply-replacements version 10.0.0
clang-tidy -export-fixes /tmp/tmpuzplyn93/tmp34u_d415.yaml -p=/home/sabbir/sst-elements-org/GNA/build /home/sabbir/sst-elements-org/GNA/sts.cc
clang-tidy -export-fixes /tmp/tmpuzplyn93/tmpkr2qkcd8.yaml -p=/home/sabbir/sst-elements-org/GNA/build /home/sabbir/sst-elements-org/GNA/GNA.cc
/home/sabbir/sst-elements-org/GNA/GNA.cc:66:12: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
    memory = loadUserSubComponent<Interfaces::SimpleMem>("memory", ComponentInfo::SHARE_NONE, clockTC, new Interfaces::SimpleMem::Handler<GNA>(this, &GNA::handleEvent));
           ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:36:9: note: Field 'numNeurons' is > 0
    if (numNeurons <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:36:5: note: Taking false branch
    if (numNeurons <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:40:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:40:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:44:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:44:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:48:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:48:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:52:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:52:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:66:104: note: Memory is allocated
    memory = loadUserSubComponent<Interfaces::SimpleMem>("memory", ComponentInfo::SHARE_NONE, clockTC, new Interfaces::SimpleMem::Handler<GNA>(this, &GNA::handleEvent));
                                                                                                       ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:66:12: note: Potential memory leak
    memory = loadUserSubComponent<Interfaces::SimpleMem>("memory", ComponentInfo::SHARE_NONE, clockTC, new Interfaces::SimpleMem::Handler<GNA>(this, &GNA::handleEvent));
           ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:69:16: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
        memory = loadAnonymousSubComponent<Interfaces::SimpleMem>("memHierarchy.memInterface", "memory", 0,
               ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:36:9: note: Field 'numNeurons' is > 0
    if (numNeurons <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:36:5: note: Taking false branch
    if (numNeurons <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:40:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:40:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:44:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:44:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:48:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:48:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:52:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:52:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:67:9: note: Assuming field 'memory' is null
    if (!memory) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:67:5: note: Taking true branch
    if (!memory) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:70:62: note: Memory is allocated
                ComponentInfo::SHARE_PORTS, params, clockTC, new Interfaces::SimpleMem::Handler<GNA>(this, &GNA::handleEvent));
                                                             ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:69:16: note: Potential memory leak
        memory = loadAnonymousSubComponent<Interfaces::SimpleMem>("memHierarchy.memInterface", "memory", 0,
               ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:95:22: warning: comparison of integers of different signs: 'int' and 'uint' (aka 'unsigned int') [clang-diagnostic-sign-compare]
    for(int i = 0; i < STSParallelism; ++i) {
                     ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:31: warning: comparison of integers of different signs: 'int' and 'uint' (aka 'unsigned int') [clang-diagnostic-sign-compare]
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
                              ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:122:36: warning: compound literals are a C99-specific feature [clang-diagnostic-c99-extensions]
        neurons[nrn_num].configure((T_NctFl){float(trig),0.0,float(trig/10.)});
                                   ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:130:23: warning: comparison of integers of different signs: 'int' and 'uint' (aka 'unsigned int') [clang-diagnostic-sign-compare]
    for (int n = 0; n < numNeurons; ++n) {
                      ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:146:26: warning: comparison of integers of different signs: 'int' and 'uint' (aka 'unsigned int') [clang-diagnostic-sign-compare]
        for (int nn=0; nn<numCon; ++nn) {
                         ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:216:20: warning: compound literals are a C99-specific feature [clang-diagnostic-c99-extensions]
        bwpl[i]  = (Ctrl_And_Stat_Types::T_BwpFl){2001,targ,i*61};
                   ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:222:1: warning: Potential leak of memory pointed to by 'bwpl' [clang-analyzer-unix.Malloc]
}
^
/home/sabbir/sst-elements-org/GNA/GNA.cc:90:9: note: Assuming 'phase' is equal to 0
    if (phase != 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:90:5: note: Taking false branch
    if (phase != 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:95:20: note: Assuming 'i' is >= field 'STSParallelism'
    for(int i = 0; i < STSParallelism; ++i) {
                   ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:95:5: note: Loop condition is false. Execution continues on line 100
    for(int i = 0; i < STSParallelism; ++i) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:24: note: 'nrn_num' is < field 'numNeurons'
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
                       ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:5: note: Loop condition is true.  Entering loop body
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:24: note: Assuming 'nrn_num' is >= field 'numNeurons'
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
                       ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:5: note: Loop condition is false. Execution continues on line 128
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:130:5: note: Loop condition is true.  Entering loop body
    for (int n = 0; n < numNeurons; ++n) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:136:13: note: Assuming 'roll' is not equal to 0
        if (roll == 0) {
            ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:136:9: note: Taking false branch
        if (roll == 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:146:24: note: Assuming 'nn' is >= 'numCon'
        for (int nn=0; nn<numCon; ++nn) {
                       ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:146:9: note: Loop condition is false. Execution continues on line 185
        for (int nn=0; nn<numCon; ++nn) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:185:9: note: '?' condition is true
        assert(sizeof(T_Wme) == 8);
        ^
/usr/include/assert.h:93:7: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
      ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:130:5: note: Loop condition is false. Execution continues on line 189
    for (int n = 0; n < numNeurons; ++n) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:213:73: note: Memory is allocated
    Ctrl_And_Stat_Types::T_BwpFl* bwpl = (Ctrl_And_Stat_Types::T_BwpFl*)calloc(bwpl_len,sizeof(Ctrl_And_Stat_Types::T_BwpFl));
                                                                        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:214:5: note: Loop condition is true.  Entering loop body
    for (int i = 0; i < bwpl_len; ++i) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:214:5: note: Loop condition is true.  Entering loop body
/home/sabbir/sst-elements-org/GNA/GNA.cc:214:5: note: Loop condition is false. Execution continues on line 219
/home/sabbir/sst-elements-org/GNA/GNA.cc:219:5: note: Loop condition is true.  Entering loop body
    for (int i = 0; i < bwpl_len; ++i) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:219:5: note: Loop condition is true.  Entering loop body
/home/sabbir/sst-elements-org/GNA/GNA.cc:219:5: note: Loop condition is false. Execution continues on line 82
/home/sabbir/sst-elements-org/GNA/GNA.cc:222:1: note: Potential leak of memory pointed to by 'bwpl'
}
^
/home/sabbir/sst-elements-org/GNA/GNA.cc:242:16: warning: comparison of integers of different signs: 'int' and 'uint' (aka 'unsigned int') [clang-diagnostic-sign-compare]
    if(targetN < numNeurons) {
               ^
Applying fixes ...
Enabled checks:
    modernize-use-override

clang-apply-replacements version 10.0.0
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcvtmpcni/tmpvegpdj2k.yaml -p=/home/sabbir/sst-elements-org/GNA/build /home/sabbir/sst-elements-org/GNA/sts.cc
clang-tidy -checks=-*,modernize-use-override -export-fixes /tmp/tmpcvtmpcni/tmpd8575gz8.yaml -p=/home/sabbir/sst-elements-org/GNA/build /home/sabbir/sst-elements-org/GNA/GNA.cc
Applying fixes ...
