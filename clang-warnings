/home/sabbir/sst-elements-org/GNA/sts.h:40:9: warning: private field 'stsID' is not used [clang-diagnostic-unused-private-field]
    int stsID;
        ^
/home/sabbir/sst-elements-org/GNA/gna_lib.h:55:5: error: unknown type name 'uint16_t' [clang-diagnostic-error]
    uint16_t SynStr; // Synaptic Strength
    ^
/home/sabbir/sst-elements-org/GNA/gna_lib.h:56:5: error: unknown type name 'uint16_t' [clang-diagnostic-error]
    uint16_t TmpOff; // Temporal Offset
    ^
/home/sabbir/sst-elements-org/GNA/gna_lib.h:57:5: error: unknown type name 'uint16_t' [clang-diagnostic-error]
    uint16_t SubAdr; // Sub-Address
    ^
/home/sabbir/sst-elements-org/GNA/gna_lib.h:58:5: error: unknown type name 'uint16_t' [clang-diagnostic-error]
    uint16_t Valid;  // Valid Flag
    ^
/home/sabbir/sst-elements-org/GNA/gna_lib.h:68:5: error: unknown type name 'uint32_t' [clang-diagnostic-error]
    uint32_t LifCnt; // LIF Count
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:66:12: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
    memory = loadUserSubComponent<Interfaces::SimpleMem>("memory", ComponentInfo::SHARE_NONE, clockTC, new Interfaces::SimpleMem::Handler<GNA>(this, &GNA::handleEvent));
           ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:36:9: note: Field 'numNeurons' is > 0
    if (numNeurons <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:36:5: note: Taking false branch
    if (numNeurons <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:40:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:40:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:44:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:44:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:48:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:48:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:52:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:52:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:66:104: note: Memory is allocated
    memory = loadUserSubComponent<Interfaces::SimpleMem>("memory", ComponentInfo::SHARE_NONE, clockTC, new Interfaces::SimpleMem::Handler<GNA>(this, &GNA::handleEvent));
                                                                                                       ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:66:12: note: Potential memory leak
    memory = loadUserSubComponent<Interfaces::SimpleMem>("memory", ComponentInfo::SHARE_NONE, clockTC, new Interfaces::SimpleMem::Handler<GNA>(this, &GNA::handleEvent));
           ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:69:16: warning: Potential memory leak [clang-analyzer-cplusplus.NewDeleteLeaks]
        memory = loadAnonymousSubComponent<Interfaces::SimpleMem>("memHierarchy.memInterface", "memory", 0,
               ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:36:9: note: Field 'numNeurons' is > 0
    if (numNeurons <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:36:5: note: Taking false branch
    if (numNeurons <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:40:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:40:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:44:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:44:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:48:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:48:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:52:9: note: Field 'BWPpTic' is > 0
    if (BWPpTic <= 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:52:5: note: Taking false branch
    if (BWPpTic <= 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:67:9: note: Assuming field 'memory' is null
    if (!memory) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:67:5: note: Taking true branch
    if (!memory) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:70:62: note: Memory is allocated
                ComponentInfo::SHARE_PORTS, params, clockTC, new Interfaces::SimpleMem::Handler<GNA>(this, &GNA::handleEvent));
                                                             ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:69:16: note: Potential memory leak
        memory = loadAnonymousSubComponent<Interfaces::SimpleMem>("memHierarchy.memInterface", "memory", 0,
               ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:95:22: warning: comparison of integers of different signs: 'int' and 'uint' (aka 'unsigned int') [clang-diagnostic-sign-compare]
    for(int i = 0; i < STSParallelism; ++i) {
                     ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:31: warning: comparison of integers of different signs: 'int' and 'uint' (aka 'unsigned int') [clang-diagnostic-sign-compare]
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
                              ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:122:36: warning: compound literals are a C99-specific feature [clang-diagnostic-c99-extensions]
        neurons[nrn_num].configure((T_NctFl){float(trig),0.0,float(trig/10.)});
                                   ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:130:23: warning: comparison of integers of different signs: 'int' and 'uint' (aka 'unsigned int') [clang-diagnostic-sign-compare]
    for (int n = 0; n < numNeurons; ++n) {
                      ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:146:26: warning: comparison of integers of different signs: 'int' and 'uint' (aka 'unsigned int') [clang-diagnostic-sign-compare]
        for (int nn=0; nn<numCon; ++nn) {
                         ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:216:20: warning: compound literals are a C99-specific feature [clang-diagnostic-c99-extensions]
        bwpl[i]  = (Ctrl_And_Stat_Types::T_BwpFl){2001,targ,i*61};
                   ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:222:1: warning: Potential leak of memory pointed to by 'bwpl' [clang-analyzer-unix.Malloc]
}
^
/home/sabbir/sst-elements-org/GNA/GNA.cc:90:9: note: Assuming 'phase' is equal to 0
    if (phase != 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:90:5: note: Taking false branch
    if (phase != 0) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:95:20: note: Assuming 'i' is >= field 'STSParallelism'
    for(int i = 0; i < STSParallelism; ++i) {
                   ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:95:5: note: Loop condition is false. Execution continues on line 100
    for(int i = 0; i < STSParallelism; ++i) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:24: note: 'nrn_num' is < field 'numNeurons'
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
                       ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:5: note: Loop condition is true.  Entering loop body
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:24: note: Assuming 'nrn_num' is >= field 'numNeurons'
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
                       ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:120:5: note: Loop condition is false. Execution continues on line 128
    for (int nrn_num=0;nrn_num<numNeurons;nrn_num++) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:130:5: note: Loop condition is true.  Entering loop body
    for (int n = 0; n < numNeurons; ++n) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:136:13: note: Assuming 'roll' is not equal to 0
        if (roll == 0) {
            ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:136:9: note: Taking false branch
        if (roll == 0) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:146:24: note: Assuming 'nn' is >= 'numCon'
        for (int nn=0; nn<numCon; ++nn) {
                       ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:146:9: note: Loop condition is false. Execution continues on line 185
        for (int nn=0; nn<numCon; ++nn) {
        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:185:9: note: '?' condition is true
        assert(sizeof(T_Wme) == 8);
        ^
/usr/include/assert.h:93:7: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
      ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:130:5: note: Loop condition is false. Execution continues on line 189
    for (int n = 0; n < numNeurons; ++n) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:213:73: note: Memory is allocated
    Ctrl_And_Stat_Types::T_BwpFl* bwpl = (Ctrl_And_Stat_Types::T_BwpFl*)calloc(bwpl_len,sizeof(Ctrl_And_Stat_Types::T_BwpFl));
                                                                        ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:214:5: note: Loop condition is true.  Entering loop body
    for (int i = 0; i < bwpl_len; ++i) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:214:5: note: Loop condition is true.  Entering loop body
/home/sabbir/sst-elements-org/GNA/GNA.cc:214:5: note: Loop condition is false. Execution continues on line 219
/home/sabbir/sst-elements-org/GNA/GNA.cc:219:5: note: Loop condition is true.  Entering loop body
    for (int i = 0; i < bwpl_len; ++i) {
    ^
/home/sabbir/sst-elements-org/GNA/GNA.cc:219:5: note: Loop condition is true.  Entering loop body
/home/sabbir/sst-elements-org/GNA/GNA.cc:219:5: note: Loop condition is false. Execution continues on line 82
/home/sabbir/sst-elements-org/GNA/GNA.cc:222:1: note: Potential leak of memory pointed to by 'bwpl'
}
^
/home/sabbir/sst-elements-org/GNA/GNA.cc:242:16: warning: comparison of integers of different signs: 'int' and 'uint' (aka 'unsigned int') [clang-diagnostic-sign-compare]
    if(targetN < numNeurons) {
               ^
/home/sabbir/sst-elements-org/GNA/GNA.h:64:10: warning: annotate this function with 'override' or (rarely) 'final' [modernize-use-override]
    void finish() {
         ^
                  override
/home/sabbir/sst-elements-org/GNA/GNA.h:64:18: note: FIX-IT applied suggested code changes
    void finish() {
                 ^
/home/sabbir/sst-elements-org/GNA/GNA.h:83:10: warning: annotate this function with 'override' or (rarely) 'final' [modernize-use-override]
    void init(unsigned int phase);
         ^
                                  override
/home/sabbir/sst-elements-org/GNA/GNA.h:83:34: note: FIX-IT applied suggested code changes
    void init(unsigned int phase);
                                 ^
/home/sabbir/sst-elements-org/GNA/gna_lib.h:55:5: error: unknown type name 'uint16_t' [clang-diagnostic-error]
    uint16_t SynStr; // Synaptic Strength
    ^
/home/sabbir/sst-elements-org/GNA/gna_lib.h:56:5: error: unknown type name 'uint16_t' [clang-diagnostic-error]
    uint16_t TmpOff; // Temporal Offset
    ^
/home/sabbir/sst-elements-org/GNA/gna_lib.h:57:5: error: unknown type name 'uint16_t' [clang-diagnostic-error]
    uint16_t SubAdr; // Sub-Address
    ^
/home/sabbir/sst-elements-org/GNA/gna_lib.h:58:5: error: unknown type name 'uint16_t' [clang-diagnostic-error]
    uint16_t Valid;  // Valid Flag
    ^
/home/sabbir/sst-elements-org/GNA/gna_lib.h:68:5: error: unknown type name 'uint32_t' [clang-diagnostic-error]
    uint32_t LifCnt; // LIF Count
    ^
